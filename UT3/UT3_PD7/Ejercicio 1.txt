Ejercicio #1: Operaciones de Unión e Intersección en TDA Lista

Especificación en Lenguaje Natural

Para las operaciones de unión e intersección:

Unión: Dados dos conjuntos ordenados, el resultado será un nuevo conjunto que contenga todos los elementos de ambos conjuntos, sin duplicados.

Intersección: Dados dos conjuntos ordenados, el resultado será un nuevo conjunto que contenga solo aquellos elementos que aparecen en ambos conjuntos.

Pre y Post Condiciones

Precondiciones: Ambos conjuntos de entrada están ordenados y no contienen duplicados.

Postcondiciones: El conjunto resultante estará ordenado y no contendrá duplicados.

Seudocódigo

Unión:
Función Unión(A, B):
    Crear lista vacía C
    i ← 0
    j ← 0
    Mientras i < longitud(A) y j < longitud(B):
        Si A[i] < B[j]:
            Añadir A[i] a C
            i ← i + 1
        Sino si A[i] > B[j]:
            Añadir B[j] a C
            j ← j + 1
        Sino:
            Añadir A[i] a C
            i ← i + 1
            j ← j + 1
    Mientras i < longitud(A):
        Añadir A[i] a C
        i ← i + 1
    Mientras j < longitud(B):
        Añadir B[j] a C
        j ← j + 1
    Devolver C

Intersección:
Función Intersección(A, B):
    Crear lista vacía C
    i ← 0
    j ← 0
    Mientras i < longitud(A) y j < longitud(B):
        Si A[i] < B[j]:
            i ← i + 1
        Sino si A[i] > B[j]:
            j ← j + 1
        Sino:
            Añadir A[i] a C
            i ← i + 1
            j ← j + 1
    Devolver C

Para la unión:

Entrada: A = [1, 3, 5], B = [2, 3, 6]
Salida esperada: [1, 2, 3, 5, 6]

Para la intersección:

Entrada: A = [1, 3, 5], B = [2, 3, 6]
Salida esperada: [3]
Análisis de Tiempo de Ejecución
Tanto la unión como la intersección tienen un tiempo de ejecución de O(n + m), donde n y m son las longitudes de las listas A y B respectivamente, ya que cada lista se recorre como máximo una vez.