public Double[][] floyd() {
    int n = vertices.size();
    Double[][] dist = new Double[n][n];

    for (int i = 0; i < n; i++) {
        Arrays.fill(dist[i], Double.POSITIVE_INFINITY);
        dist[i][i] = 0.0;
    }

    int i = 0;
    Map<Comparable, Integer> indices = new HashMap<>();
    for (Comparable etiqueta : vertices.keySet()) {
        indices.put(etiqueta, i++);
    }

    for (TVertice vertice : vertices.values()) {
        int origenIdx = indices.get(vertice.getEtiqueta());
        for (TAdyacencia adyacencia : vertice.getAdyacentes()) {
            int destinoIdx = indices.get(adyacencia.getDestino().getEtiqueta());
            dist[origenIdx][destinoIdx] = adyacencia.getCosto();
        }
    }

    for (int k = 0; k < n; k++) {
        for (int i2 = 0; i2 < n; i2++) {
            for (int j = 0; j < n; j++) {
                if (dist[i2][k] + dist[k][j] < dist[i2][j]) {
                    dist[i2][j] = dist[i2][k] + dist[k][j];
                }
            }
        }
    }

    return dist;
}
